class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {    
        int leftIndex = -1;
        int rightIndex = nums.size();        
        
        if(nums.size() <= 1) return 0;
        
        //find left element
        for(int i=1; i < nums.size(); i++) {            
            if (leftIndex == -1) {
               if(nums[i] < nums[i-1] ) {
                    leftIndex = i; 
               }
            }else {
                    if (nums[i] < nums[leftIndex]) {
                    leftIndex = i;
                }
            }            
        }
        
        //find right element
        for(int i=nums.size()-2; i >= 0; i--) {            
            if (rightIndex == nums.size()) {
               if(nums[i] > nums[i+1] ) {
                    rightIndex = i; 
               }
            }else {
                    if (nums[i] > nums[rightIndex]) {
                    rightIndex = i;
                }
            }            
        }
        
        if(leftIndex == -1 && rightIndex == nums.size()) {
            return 0;
        }
        
        //find correct place for left index
        for(int i=0; i < leftIndex; i++ ) {
              if (nums[i] > nums[leftIndex]) {
                  leftIndex = i;
                  break;
              }    
        }
        
        //find the correct place for right index
        for(int i=nums.size()-1; i > rightIndex; i-- ) {
              if (nums[i] < nums[rightIndex]) {
                  rightIndex = i;
                  break;
              }    
        }
        return abs(leftIndex - rightIndex) + 1;
    }
};
